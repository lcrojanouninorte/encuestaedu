/* materializecss-autocomplete - v1.0.14 - 2017-09-06 */
!function() {
    "use strict";
    angular.module("material.autocomplete", [ "material.autocomplete.templates" ]).run([ "$templateCache", "$compile", "$rootScope", function(a, b, c) {
        b(a.get("ac-templates"))(c);
    } ]);
}(), angular.module("material.autocomplete.templates", []).run([ "$templateCache", function(a) {
    "use strict";
    a.put("ac-templates", '<script type=text/ng-template id=acTemplate.html><div name="searchAutocomplete" id="autocompleteForm-{{ac.id}}" ng-init="ac.inputFieldName=\'acInputField-\'+ac.id">\n        <div id="acDirective" class="acDirectiveAutocomplete">\n            <div class="row">\n                <div id="acForm" class="input-field col s12 has-clear" ng-init="ac.init()">\n                    <input id="autocomplete-{{ac.id}}"\n                           name="{{ac.inputFieldName}}"\n                           type="text"\n                           ng-model="ac.searchText"\n                           ng-focus="ac.focus($event)"\n                           ng-blur="ac.blur($event)"\n                           ng-keydown="ac.keydown($event)"\n                           ng-disabled="ac.disableInput"\n                           ng-required="ac.required"\n                           autocomplete="off"\n                           class="ac-input"\n                           ng-style="ac.checkError()  && ac.setInputBorderStyle(ac.errorColor) || ac.checkSuccess() && ac.setInputBorderStyle(ac.successColor)"\n                    >\n                    <span ng-if="!ac.disableCrossIcon && ac.searchText.length>0" id="clear {{ac.autocompleteId}}"\n                          class="clearBtn" title="Clear"\n                          ng-click="ac.clearValue()">&times;</span>\n                    <label for="autocomplete-{{ac.id}}" ng-class="{\'active\':(ac.searchText||ac.isInputFocus)}"\n                           ng-style="ac.checkError() && ac.setTextStyle(ac.errorColor) || ac.checkSuccess() && ac.setTextStyle(ac.successColor)">\n                        {{ac.inputName}}\n                    </label>\n                    <span class="text-input-wrapper"></span>\n                </div>\n            </div>\n            <div class="progress" ng-show="ac.loading">\n                <div class="indeterminate"></div>\n            </div>\n            <div class=" row" ng-hide="ac.hidden" ng-mouseenter="ac.onListEnter()"\n                 ng-mouseleave="ac.onListLeave()" ng-mouseup="ac.onMouseup()">\n                <div id="acDropdown" class=" s12">\n                    <ul class="collection dropdown-ul" role="menu" aria-labelledby="simple-btn-keyboard-nav"\n                        ng-show="ac.itemList.length>0">\n                        <li class="collection-item  dropdown-li waves-effect"\n                            ng-repeat="item in ac.itemList | filter: (!ac.remoteMethod ? ac.searchText  : \'\' )"\n                            ng-click="ac.selectItem(item)"\n                            ng-class="{\'selected\': $index === ac.index,\'avatar\':item[ac.displayPicture]}">\n\n                            <img ng-if="item[ac.displayPicture]" ng-src="{{item[ac.displayPicture]}}" alt=""\n                                 class="circle">\n                            <div ng-if="ac.displayColor"\n                                 class="circle displayColor left"\n                                 ng-style="{\'background-color\': item[ac.displayColor]}">\n                            </div>\n                            <div>{{item[ac.displayProperty1]}}<span\n                                    class="right">{{item[ac.displaySubProperty1]}}</span>\n                            </div>\n                            <div ng-if="item[ac.displayProperty2]">{{item[ac.displayProperty2]}}<span class="right">{{item[ac.displaySubProperty2]}}</span>\n                            </div>\n                            <div ng-if="item[ac.displayProperty3]">{{item[ac.displayProperty3]}}<span class="right">{{item[ac.displaySubProperty3]}}</span>\n                            </div>\n                        </li>\n                    </ul>\n                    <ul class="collection dropdown-ul" role="menu" aria-labelledby="simple-btn-keyboard-nav"\n                        ng-hide="ac.itemList.length>0 || !ac.searchText">\n                        <li class="collection-item  dropdown-li waves-effect">\n                            Your search <b>"{{ac.searchText}}"</b> was not found\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div ng-if="(ac.checkError())"\n                 class="right errorMsg"\n                 ng-style="ac.setTextStyle(ac.errorColor)">\n                {{ac.selectionErrorMessage}}\n            </div>\n        </div>\n    </div><\/script>');
} ]), function() {
    "use strict";
    var a = function(a) {
        return {
            restrict: "E",
            scope: {},
            require: [ "^?form" ],
            bindToController: {
                id: "@acId",
                inputName: "@acInputName",
                showInputName: "=?acShowInputName",
                placeHolder: "@?acPlaceHolder",
                selectedItem: "=acSelectedItem",
                searchText: "=?acSearchText",
                displayProperty1: "@acDisplayProperty1",
                displayProperty2: "@?acDisplayProperty2",
                displayProperty3: "@?acDisplayProperty3",
                displaySubProperty1: "@?acDisplaySubProperty1",
                displaySubProperty2: "@?acDisplaySubProperty2",
                displaySubProperty3: "@?acDisplaySubProperty3",
                displayColor: "@acDisplayColor",
                displayPicture: "@acDisplayPicture",
                uniqueDisplayProperty: "=?acUniqueDisplayProperty",
                itemList: "=?acItems",
                remoteMethod: "@?acRemoteMethod",
                itemChange: "&?acSelectedItemChange",
                disableInput: "=?acDisableInput",
                onBlurCb: "&?acOnBlurCb",
                onFocusCb: "&?acOnFocusCb",
                minlength: "=?acMinlength",
                required: "=?acRequired",
                selectionErrorMessage: "=?acSelectionErrorMessage",
                errorColor: "=?acErrorColor",
                successColor: "=?acSuccessColor",
                disableCrossIcon: "=?acDisableCrossIcon"
            },
            replace: !0,
            controller: "materialAutocompleteCntrl",
            controllerAs: "ac",
            templateUrl: "acTemplate.html",
            link: function(b, c, d, e) {
                a(function() {
                    b.parentForm = e[0], e[0] && e[0].$$parentForm.$name && (b.immediateParentForm = e[0], 
                    b.parentForm = e[0].$$parentForm), b.$apply();
                }, 10);
            }
        };
    };
    angular.module("material.autocomplete").directive("materialAutocomplete", [ "$timeout", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e) {
        function f() {
            g(), h(), y.parentForm && null !== y.parentForm && y.parentForm.$setDirty();
        }
        function g() {
            y.searchText = "";
        }
        function h() {
            y.element.input.blur(), y.element.input.value = null, m(), y.element.input.focus();
        }
        function i() {
            a.$watch(angular.bind(y, function() {
                return y.searchText;
            }), m), a.$watch(angular.bind(y, function() {
                return y.selectedItem;
            }), n);
        }
        function j() {
            return !k();
        }
        function k() {
            return !y.loading && (!l() && !!B);
        }
        function l() {
            return !!y.selectedItem;
        }
        function m(a, b) {
            y.index = -1, a !== b && (y.selectedItem && y.displayProperty1 ? (s(!1), y.selectedItem[y.displayProperty1] !== a && (y.selectedItem = null, 
            y.hidden = j(), y.itemList && y.itemListCopy && (y.itemList = angular.copy(y.itemListCopy)))) : y.remoteMethod ? t(a) : y.itemList && (y.itemList = e("filter")(y.itemListCopy, a)));
        }
        function n(a, b) {
            a ? (y.displayProperty1 && (y.searchText = a[y.displayProperty1]), y.parentForm && null !== y.parentForm && y.parentForm.$setDirty()) : b && y.searchText && b[y.displayProperty1] === y.searchText && (y.searchText = ""), 
            a !== b && o();
        }
        function o() {
            angular.isFunction(y.itemChange) && y.itemChange(y.selectedItem);
        }
        function p(a) {
            var b = {};
            for (var c in a) a.hasOwnProperty(c) && (b[c] = angular.element(a[c]));
            return b;
        }
        function q() {
            if (y.element.li[0]) {
                var a = y.element.li[0].offsetHeight, b = a * y.index, c = b + a, d = y.element.scroller.clientHeight, e = y.element.scroller.scrollTop;
                b < e ? r(b) : c > e + d && r(c - d);
            }
        }
        function r(a) {
            y.element.scroller.scrollTop = a;
        }
        function s(a) {
            y.loading !== a && (y.loading = a), y.hidden = j();
        }
        function t(b) {
            function d(a) {
                (b || "") === (y.searchText || "") && w(a);
            }
            var e = a.$parent.$eval(y.remoteMethod), f = angular.isArray(e), g = !!e && !!e.then;
            f ? d(e) : g && function(a) {
                a && (a = c.when(a), s(!0), a.then(d));
            }(e);
        }
        function u() {
            t(y.searchText || ""), y.hidden = j();
        }
        function v(a) {
            for (var b = [], c = {}, d = 0; d < a.length; d++) c[a[d][y.displayProperty1]] || (c[a[d][y.displayProperty1]] = !0, 
            b.push(a[d]));
            return b;
        }
        function w(a) {
            y.uniqueDisplayProperty && (a = v(a)), y.itemList = a, y.hidden = j(), y.loading && s(!1);
        }
        function x(a) {
            var b = [];
            return a.forEach(function(a) {
                b.push({
                    index: a
                });
            }), b;
        }
        var y = this;
        d(function() {
            y.parentForm = a.parentForm, y.immediateParentForm = a.immediateParentForm;
        }, 20);
        var z = {
            COMMA: 188,
            SEMICOLON: 186,
            ENTER: 13,
            ESCAPE: 27,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT_ARROW: 37,
            UP_ARROW: 38,
            RIGHT_ARROW: 39,
            DOWN_ARROW: 40,
            TAB: 9,
            BACKSPACE: 8,
            DELETE: 46
        }, A = !1, B = !1;
        y.required = !!y.required, y.isInputFocus = !1, y.isInputBlur = !1, y.clearButton = !1, 
        y.loading = !1, y.index = -1, y.isDisabled = null, y.isRequired = null, y.hasNotFound = !1, 
        y.hidden = !0, y.searchText || (y.searchText = ""), y.init = function() {
            i(), y.element = {
                input: b.find("input")[0],
                scroller: b.find("ul")[0],
                scrollContainer: b[0].querySelector("#acDropdown"),
                label: b.find("label")[0]
            }, y.element.li = y.element.scroller.getElementsByTagName("li"), y.element.$ = p(y.element), 
            y.setInputName(), y.itemList && "string" == typeof y.itemList[0] && (y.itemList = x(y.itemList)), 
            y.itemList && "object" == typeof y.itemList[0] && (y.itemListCopy = angular.copy(y.itemList)), 
            y.remoteMethod && (y.itemList = []), y.selectedItem && y.displayProperty && (y.searchText = y.selectedItem[y.displayProperty]);
        }, y.setPlaceHolder = function() {
            y.element.input.setAttribute("placeholder", y.placeHolder || "");
        }, y.removePlaceHolder = function() {
            try {
                (y.showInputName || void 0 === y.showInputName) && y.element.input.removeAttribute("placeholder"), 
                y.element.input.value && "" !== y.element.input.value || y.element.label.classList.remove("active");
            } catch (a) {}
        }, y.setInputName = function() {
            !1 === y.showInputName && y.setPlaceHolder();
        }, y.clearValue = f, y.focus = function(a) {
            y.isInputFocus = !0, y.isInputBlur = !1, angular.isFunction(y.onFocusCb) && y.onFocusCb(), 
            y.setPlaceHolder(), B = !0, k() && y.remoteMethod && u(), y.hidden = j();
        }, y.blur = function(a) {
            y.isInputFocus = !1, y.isInputBlur = !0, angular.isFunction(y.onBlurCb) && y.onBlurCb(), 
            y.removePlaceHolder(), B = !1, A || (y.hidden = j()), y.checkError() ? (y.parentForm && null !== y.parentForm && y.parentForm.$setValidity("selection", !1), 
            y.immediateParentForm && (y.immediateParentForm.$setValidity("selection", !1), y.immediateParentForm[y.inputFieldName].$setValidity("selection", !1))) : (y.parentForm && null !== y.parentForm && y.parentForm.$setValidity("selection", !0), 
            y.immediateParentForm && (y.immediateParentForm.$setValidity("selection", !0), y.immediateParentForm[y.inputFieldName].$setValidity("selection", !0)));
        }, y.selectItem = function(a) {
            y.searchText = a[y.displayProperty1], y.selectedItem = a, y.hidden = j();
        }, y.onListEnter = function() {
            A = !0;
        }, y.onListLeave = function() {
            B || y.hidden || y.element.input.focus(), A = !1, y.hidden = j();
        }, y.onMouseup = function() {
            y.element.input.focus();
        }, y.keydown = function(a) {
            switch (a.keyCode) {
              case z.DOWN_ARROW:
                if (y.loading) return;
                a.stopPropagation(), a.preventDefault(), y.index = Math.min(y.index + 1, y.itemList.length - 1), 
                q();
                break;

              case z.UP_ARROW:
                if (y.loading) return;
                a.stopPropagation(), a.preventDefault(), y.index = y.index < 0 ? y.itemList.length - 1 : Math.max(0, y.index - 1), 
                q();
                break;

              case z.ENTER:
                if (y.hidden || y.loading || y.index < 0 || y.itemList.length < 1) return;
                if (l()) return;
                a.stopPropagation(), a.preventDefault(), y.selectedItem = y.itemList[y.index], s(!1);
            }
        }, y.setTextStyle = function(a) {
            return {
                color: a
            };
        }, y.setInputBorderStyle = function(a) {
            return {
                "border-bottom-color": a,
                "box-shadow": "0 1px 0 0 " + a
            };
        }, y.checkSuccess = function() {
            return y.isInputFocus && y.selectedItem && !y.disableInput;
        }, y.checkError = function() {
            var a = !1;
            return y.parentForm && null !== y.parentForm && (a = y.parentForm.$submitted), y.required && !y.disableInput && !y.selectedItem && (y.isInputBlur || a);
        };
    };
    angular.module("material.autocomplete").controller("materialAutocompleteCntrl", [ "$scope", "$element", "$q", "$timeout", "$filter", a ]);
}();
//# sourceMappingURL=materializecss-autocomplete.min.js.map